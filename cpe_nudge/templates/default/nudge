<%= node['cpe_nudge']['shebang'] %>
# -*- coding: utf-8 -*-
'''nudge - python wrapper for major OS updates.'''
import json
import optparse
import os
import platform
import random
import re
import shutil
import subprocess
import sys
import tempfile
import time
import urllib.request, urllib.parse, urllib.error
import webbrowser
from datetime import datetime, timedelta
from distutils.version import LooseVersion
from urllib.parse import urlparse, unquote
import Foundation
import objc
from AppKit import *
from CoreFoundation import CFPreferencesCopyAppValue, CFPreferencesSetAppValue, CFPreferencesAppSynchronize
from SystemConfiguration import SCDynamicStoreCopyConsoleUser

from nibbler import *
import gurl


class timerController(Foundation.NSObject):
    '''Thanks to frogor for help in figuring this part out'''
    def activateWindow_(self, timer_obj):
        determine_state_and_nudge()


def determine_state_and_nudge():
    '''Determine the state of nudge and re-fresh window'''
    workspace = NSWorkspace.sharedWorkspace()
    currently_active = NSApplication.sharedApplication().isActive()
    frontmost_app = workspace.frontmostApplication().bundleIdentifier()
    # Setup these globals as we will potentially override them
    global NUDGE_DISMISSED_COUNT
    global ACCEPTABLE_APPS
    if not currently_active and frontmost_app not in ACCEPTABLE_APPS:
        nudgelog('Nudge or acceptable applications not currently active')
        # If this is the under max dismissed count, just bring nudge back to the forefront
        # This is the old behavior
        if NUDGE_DISMISSED_COUNT < DISMISSAL_COUNT_THRESHOLD:
            nudgelog('Nudge dismissed count under threshold')
            NUDGE_DISMISSED_COUNT += 1
            bring_nudge_to_forefront()
        else:
            # Get more aggressive - new behavior
            nudgelog('Nudge dismissed count over threshold')
            NUDGE_DISMISSED_COUNT += 1
            nudgelog('Enforcing acceptable applications')
            # Loop through all the running applications
            for app in NSWorkspace.sharedWorkspace().runningApplications():
                app_name = str(app.bundleIdentifier())
                app_bundle = str(app.bundleURL())
                if app_bundle:
                    # The app bundle contains file://, quoted path and trailing slashes
                    app_bundle_path = unquote(urlparse(app_bundle).path).rstrip('\/')
                    # Add Software Update pane or macOS upgrade app to acceptable app list
                    if app_bundle_path == PATH_TO_APP:
                        ACCEPTABLE_APPS.append(app_name)
                else:
                    # Some of the apps from NSWorkspace don't have bundles, so force empty string
                    app_bundle_path = ''
                # Hide any apps that are not in acceptable list or are not the macOS upgrade app
                if (app_name not in ACCEPTABLE_APPS) or (app_bundle_path != PATH_TO_APP):
                    app.hide()
                    # Race condition with NSWorkspace. Python is faster :)
                    time.sleep(0.001)
            # Another small sleep to ensure we can bring Nudge on top
            time.sleep(0.5)
            bring_nudge_to_forefront()
            # Pretend to open the button and open the update mechanism
            button_update(True)
    nudge.views['field.deferralcount'].setStringValue_(str(NUDGE_DISMISSED_COUNT))


def bring_nudge_to_forefront():
    '''Brings nudge to the forefront - old behavior'''
    nudgelog('Nudge not active - Activating to the foreground')
    # We have to bring back python to the forefront since nibbler is a giant cheat
    NSApplication.sharedApplication().activateIgnoringOtherApps_(True)
    # Now bring the nudge window itself to the forefront
    # Nibbler objects have a .win property (...should probably be .window)
    # that contains a reference to the first NSWindow it finds
    nudge.win.makeKeyAndOrderFront_(None)


def button_moreinfo():
    '''Open browser more info button'''
    nudgelog('User clicked on more info button - opening URL in default browser')
    webbrowser.open_new_tab(MORE_INFO_URL)


def button_update(simulated_click=False):
    '''Start the update process'''
    if simulated_click:
        nudgelog('Simulated click on update button - opening update application')
    else:
        nudgelog('User clicked on update button - opening update application')
    cmd = ['/usr/bin/open', PATH_TO_APP]
    subprocess.Popen(cmd)


def button_ok():
    '''Quit out of nudge if user hits the ok button'''
    nudgelog('User clicked on ok button - exiting application')
    nudge.quit()


def button_understand():
    '''Add an extra button to force the user to read the dialog, prior to being
    able to exit the UI.'''
    nudgelog('User clicked on understand button - enabling ok button')
    nudge.views['button.understand'].setHidden_(True)
    nudge.views['button.ok'].setHidden_(False)
    nudge.views['button.ok'].setEnabled_(True)
    nudge.views['button.understand'].setEnabled_(False)


def downloadfile(options):
    '''download file with gurl'''
    connection = gurl.Gurl.alloc().initWithOptions_(options)
    percent_complete = -1
    bytes_received = 0
    connection.start()
    try:
        filename = options['name']
    except KeyError:
        nudgelog(('No \'name\' key defined in json for %s' %
               pkgregex(options['file'])))
        sys.exit(1)

    try:
        while not connection.isDone():
            if connection.destination_path:
                # only print progress info if we are writing to a file
                if connection.percentComplete != -1:
                    if connection.percentComplete != percent_complete:
                        percent_complete = connection.percentComplete
                        nudgelog(('Downloading %s - Percent complete: %s ' % (
                            filename, percent_complete)))
                elif connection.bytesReceived != bytes_received:
                    bytes_received = connection.bytesReceived
                    nudgelog(('Downloading %s - Bytes received: %s ' % (
                        filename, bytes_received)))

    except (KeyboardInterrupt, SystemExit):
        # safely kill the connection then fall through
        connection.cancel()
    except Exception:  # too general, I know
        # Let us out! ... Safely! Unexpectedly quit dialogs are annoying ...
        connection.cancel()
        # Re-raise the error
        raise

    if connection.error is not None:
        nudgelog(('Error: %s %s ' % (str(connection.error.code()),
                                  str(connection.error.localizedDescription()))))
        if connection.SSLerror:
            nudgelog('SSL error: %s ' % (str(connection.SSLerror)))
    if connection.response is not None:
        nudgelog('Status: %s ' % (str(connection.status)))
        nudgelog('Headers: %s ' % (str(connection.headers)))
    if connection.redirection != []:
        nudgelog('Redirection: %s ' % (str(connection.redirection)))


def get_console_username_info():
    '''Uses Apple's SystemConfiguration framework to get the current
    console username'''
    return SCDynamicStoreCopyConsoleUser(None, None, None)


def get_os_sub_build_version():
    '''Return sub build of macOS'''
    cmd = ['/usr/sbin/sysctl', '-n', 'kern.osversion']
    run = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    output = run.communicate()[0]
    return LooseVersion(output.decode("utf-8").strip())


def get_os_version():
    '''Return OS version.'''
    return LooseVersion(platform.mac_ver()[0])


def get_os_version_major():
    '''Return major OS version.'''
    full_os = platform.mac_ver()[0]
    # Sometimes the OS version will return without the dot release
    # For example, it may show as 10.15.0 instead of 10.15
    if len(full_os.split('.')) == 3:
        return LooseVersion(full_os.rsplit('.', 1)[0])
    elif len(full_os.split('.')) == 2:
        return LooseVersion(full_os)
    else:
        nudgelog('Cannot reliably determine OS major version. Exiting...')
        exit(1)


def get_parsed_options():
    '''Return the parsed options and args for this application.'''
    # Options
    usage = '%prog [options]'
    options = optparse.OptionParser(usage=usage)
    options.add_option('--headers', help=('Optional: Auth headers'))
    options.add_option('--jsonurl', help=('Required: URL to json file.'))
    return options.parse_args()


def get_serial():
    '''Get system serial number'''
    # Credit to Michael Lynn
    IOKit_bundle = Foundation.NSBundle.bundleWithIdentifier_('com.apple.framework.IOKit')

    functions = [("IOServiceGetMatchingService", b"II@"),
                 ("IOServiceMatching", b"@*"),
                 ("IORegistryEntryCreateCFProperty", b"@I@@I"),
                ]

    objc.loadBundleFunctions(IOKit_bundle, globals(), functions)
    # pylint: disable=undefined-variable
    serial = IORegistryEntryCreateCFProperty(
        IOServiceGetMatchingService(
            0,
            IOServiceMatching(
                "IOPlatformExpertDevice".encode("utf-8")
            )),
        Foundation.NSString.stringWithString_("IOPlatformSerialNumber"),
        None,
        0)
    # pylint: enable=undefined-variable
    return serial


def load_nudge_globals():
    '''Try to figure out the path of nudge.nib and load it.'''
    try:
        # Setup our global nudge variable to inject into our nib file
        global nudge
        nudge = Nibbler(os.path.join(NUDGE_PATH, 'nudge.nib'))
    except IOError:
        nudgelog('Unable to load nudge nib file!')
        exit(20)


def nudge_already_loaded():
    '''Check if nudge is already loaded'''
    nudge_string = '/Library/nudge/Resources/nudge'
    cmd = ['/bin/ps', '-o', 'pid', '-o', 'command']
    run = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    output, err = run.communicate()
    status = output.split(b'\n')
    current_pid = str(os.getpid())
    for line in status:
        if bytes(nudge_string, 'utf-8') in line:
            if bytes(current_pid, 'utf-8') in line:
                pass
            else:
                return True
    return False


def nudgelog(text):
    '''logger for nudge'''
    Foundation.NSLog('[Nudge] ' + text)


def pref(pref_name, domain='com.erikng.nudge'):
    """Returns a preference from the specified domain.

    Uses CoreFoundation.

    Args:
      pref_name: str preference name to get.
    """
    pref_value = CFPreferencesCopyAppValue(
        pref_name, domain)
    if isinstance(pref_value, Foundation.NSDate):
        # convert NSDate/CFDates to strings
        pref_value = str(pref_value)
    return pref_value


def set_pref(pref_name, value, domain='com.erikng.nudge'):
    """Sets a value in Preferences.
    Uses CoreFoundation.
    Args:
       pref_name: str preference name to set.
       value: value to set it to.
    """
    CFPreferencesSetAppValue(pref_name, value, domain)
    CFPreferencesAppSynchronize(domain)


def download_apple_updates():
    '''Download everything Softwareupdate has to offer'''

    cmd = [
        '/usr/sbin/softwareupdate',
        '-da',
        '--force'
    ]

    try:
        return subprocess.check_output(cmd)
    except subprocess.CalledProcessError:
        return None


def pending_apple_updates():
    '''Pending apple updates
    Returns a dict of pending updates'''

    return pref('RecommendedUpdates', 'com.apple.SoftwareUpdate')


def update_app_path():
    software_updates_prefpane = '/System/Library/PreferencePanes/SoftwareUpdate.prefPane'
    if os.path.exists(software_updates_prefpane):
        return 'file://{}'.format(software_updates_prefpane)
    else:
        return 'macappstore://showUpdatesPage'


def pkgregex(pkgpath):
    '''regular expression for pkg'''
    try:
        # capture everything after last / in the pkg filepath
        pkgname = re.compile(r"[^/]+$").search(pkgpath).group(0)
        return pkgname
    except AttributeError as IndexError:
        return pkgpath


def get_minimum_minor_update_days(update_minor_days, pending_apple_updates, nudge_su_prefs):
    '''Lowest number of days before something is forced'''
    if pending_apple_updates == [] or pending_apple_updates is None:
        return update_minor_days

    lowest_days = update_minor_days
    todays_date = datetime.utcnow()
    for item in nudge_su_prefs:
        for update in pending_apple_updates:
            if str(item['name']) == str(update['Product Key']):
                nudgelog('{} has a forced date'.format(update['Product Key']))
                force_date_strp = datetime.strptime(item['force_install_date'], '%Y-%m-%d-%H:%M')
                date_diff_seconds = (force_date_strp - todays_date).total_seconds()
                date_diff_days = int(round(date_diff_seconds / 86400))
                if date_diff_days < lowest_days:
                    lowest_days = date_diff_days

    return lowest_days


def main():
    '''Main thread'''
    opts, _ = get_parsed_options()

    if nudge_already_loaded():
        nudgelog('nudge already loaded!')
        exit(0)

    # Get the current username
    user_name, current_user_uid, _ = get_console_username_info()

    # Bail if we are not in a user session.
    if user_name in (None, 'loginwindow', '_mbsetupuser'):
        exit(0)

    # Setup our globals to use across nibbler and nibbler functions
    global DISMISSAL_COUNT_THRESHOLD
    global NUDGE_PATH
    global MORE_INFO_URL
    global PATH_TO_APP
    global NUDGE_DISMISSED_COUNT
    global ACCEPTABLE_APPS

    # Figure out the local path of nudge
    NUDGE_PATH = os.path.dirname(os.path.realpath(__file__))

    # Part for enhanced enforcement of Nudge
    NUDGE_DISMISSED_COUNT = 0
    ACCEPTABLE_APPS = [
        'com.apple.loginwindow',
        'com.apple.systempreferences',
        'org.python.python'
    ]

    # local json path - if it exists already, let's assume someone is bundling
    # it with their package. Otherwise check for it and use gurl.
    json_path = os.path.join(NUDGE_PATH, 'nudge.json')
    cleanup = True
    if os.path.isfile(json_path):
        cleanup = False
        json_raw = open(json_path).read()
    else:
        tmp_dir = tempfile.mkdtemp()
        tmp_json = os.path.join(tmp_dir, 'nudge.json')
        json_path = tmp_json
        json_raw = None
        if opts.jsonurl:
            json_url = opts.jsonurl
            # json data for gurl download
            json_data = {
                'url': json_url,
                'file': json_path,
                'name': 'nudge.json'
            }

            # Grab auth headers if they exist and update the json_data dict.
            if opts.headers:
                headers = {'Authorization': opts.headers}
                json_data.update({'additional_headers': headers})

            url_parse = urllib.parse.urlparse(json_url)
            if url_parse.scheme == 'file':
                # File resources should be handled natively
                try:
                    json_raw = urllib.request.urlopen(json_url).read()
                except urllib.error.URLError as err:
                    nudgelog(err)
                    shutil.rmtree(tmp_dir)
                    exit(1)
            else:
                # If the file doesn't exist, grab it and wait half a second to save.
                while not os.path.isfile(json_path):
                    nudgelog(('Starting download: %s' % (urllib.parse.unquote(
                        json_data['url']))))
                    downloadfile(json_data)
                    time.sleep(0.5)
        else:
            nudgelog('nudge JSON file not specified!')
            shutil.rmtree(tmp_dir)
            exit(1)

    # Load up file to grab all the items.
    if json_raw:
        nudge_json = json.loads(json_raw)
    else:
        nudge_json = json.loads(open(json_path).read())

    # Load nudge preferences
    nudge_prefs = nudge_json['preferences']
    # Setup nudge preferences and all defaults if not set
    button_title_text = nudge_prefs.get('button_title_text',
        'Ready to start the update?')
    button_sub_titletext = nudge_prefs.get('button_sub_titletext',
        'Click on the button below.')
    cut_off_date = nudge_prefs.get('cut_off_date', False)
    cut_off_date_warning = nudge_prefs.get('cut_off_date_warning', 3)
    days_between_notifications = nudge_prefs.get('days_between_notifications',
        0)
    DISMISSAL_COUNT_THRESHOLD = nudge_prefs.get('dismissal_count_threshold', 9999999)
    logo_path = nudge_prefs.get('logo_path', 'company_logo.png')
    main_subtitle_text = nudge_prefs.get('main_subtitle_text',
        'A friendly reminder from your local IT team')
    main_title_text = nudge_prefs.get('main_title_text', 'macOS Update')
    minimum_os_sub_build_version = nudge_prefs.get('minimum_os_sub_build_version', '10A00')
    minimum_os_version = nudge_prefs.get('minimum_os_version', '10.14.6')
    minimum_os_version_major = minimum_os_version.rsplit('.', 1)[0]
    MORE_INFO_URL = nudge_prefs.get('more_info_url', False)
    no_timer = nudge_prefs.get('no_timer', False)
    paragraph1_text = nudge_prefs.get('paragraph1_text',
        'A fully up-to-date device is required to ensure that IT can your accurately protect your computer.')
    paragraph2_text = nudge_prefs.get('paragraph2_text',
        'If you do not update your computer, you may lose access to some items necessary for your day-to-day tasks.')
    paragraph3_text = nudge_prefs.get('paragraph3_text',
        'To begin the update, simply click on the button below and follow the provided steps.')
    paragraph_title_text = nudge_prefs.get('paragraph_title_text',
        'A security update is required on your machine.')
    PATH_TO_APP = nudge_prefs.get('path_to_app',
        '/Applications/Install macOS Mojave.app')
    screenshot_path = nudge_prefs.get('screenshot_path', 'update_ss.png')
    LOCAL_URL_FOR_UPGRADE = nudge_prefs.get('local_url_for_upgrade', False)
    timer_day_1 = nudge_prefs.get('timer_day_1', 600)
    timer_day_3 = nudge_prefs.get('timer_day_3', 7200)
    timer_elapsed = nudge_prefs.get('timer_elapsed', 10)
    timer_final = nudge_prefs.get('timer_final', 60)
    timer_initial = nudge_prefs.get('timer_initial', 14400)
    random_delay = nudge_prefs.get('random_delay', False)
    nudge_su_prefs = nudge_json.get('software_updates', [])
    update_minor = nudge_prefs.get('update_minor', False)
    update_minor_days = nudge_prefs.get('update_minor_days', 14)

    # Start information
    nudgelog('Target OS version: %s ' % minimum_os_version)
    if update_minor:
        if minimum_os_sub_build_version == '10A00':
            update_minor = False
        else:
            nudgelog('Target OS subversion: %s' % minimum_os_sub_build_version)
    nudgelog('Dismissal count threshold: %s ' % DISMISSAL_COUNT_THRESHOLD)


    # cleanup the tmp stuff now
    if cleanup:
        nudgelog('Cleaning up temporary files...')
        shutil.rmtree(tmp_dir)

    if random_delay:
        delay = random.randint(1,1200)
        nudgelog('Delaying run for {} seconds...'.format(delay))
        time.sleep(delay)

    # If the admin put '10.14' and not '10.14.0' the major version will be '10'
    # so make sure this error doesn't happen and the comparison doesn't fail.
    if '.' not in minimum_os_version_major:
        minimum_os_version_major = minimum_os_version

    os_version = get_os_version()
    os_version_major = get_os_version_major()
    os_version_sub_build = get_os_sub_build_version()

    # Example 10.14.6 (18G103) >=  10.14.6 (18G84)
    if os_version_sub_build >= LooseVersion(minimum_os_sub_build_version) and update_minor:
        nudgelog('OS version sub build is higher or equal to the minimum threshold: %s' % str(os_version_sub_build))
        exit(0)
    # Example: 10.14.6 >= 10.14.6
    elif os_version >= LooseVersion(minimum_os_version) and not update_minor:
        nudgelog('OS version is higher or equal to the minimum threshold: %s' % str(os_version))
        exit(0)
    # Example: 10.14/10.14.0 >= 10.14
    elif os_version_major >= LooseVersion(minimum_os_version_major) and not update_minor:
        nudgelog('OS major version is higher or equal to the minimum threshold and minor updates not enabled: %s ' % str(os_version))
        exit(0)
    else:
        nudgelog('OS version is below the minimum threshold: %s' % str(os_version))
        if update_minor and LooseVersion(minimum_os_sub_build_version) > os_version_sub_build:
            nudgelog('OS version is below the minimum threshold subversion: %s' % str(os_version_sub_build))

    minor_updates_required = False

    # Start main logic on major and minor upgrades
    if LooseVersion(minimum_os_version_major) > os_version_major:
        # This is a major upgrade now and needs the app. We shouldn't
        # perform minor updates.
        if LOCAL_URL_FOR_UPGRADE:
            # Reassign the global PATH_TO_APP with the specified local
            # upgrade URL
            PATH_TO_APP = LOCAL_URL_FOR_UPGRADE
        else:
            if not os.path.exists(PATH_TO_APP):
                nudgelog('Update application not found! Exiting...')
                exit(1)
    else:
        # do minor version stuff
        if update_minor:
            nudgelog('Checking for minor updates.')
            swupd_output = download_apple_updates()
            if not swupd_output:
                nudgelog('Could not run softwareupdate')
                # Exit 0 as we might be offline
                # TODO: Check if we're offline to exit with the
                # appropriate code
                exit(0)

            if pending_apple_updates() == [] or pending_apple_updates() is None:
                nudgelog('No Software updates to install')
                set_pref('first_seen', None)
                set_pref('last_seen', None)
                exit(0)
            else:
                # There are pending updates
                first_seen = pref('first_seen')
                last_seen = pref('last_seen')
                PATH_TO_APP = update_app_path()

                apple_sus_prefs_path = '/Library/Preferences/com.apple.SoftwareUpdate'

                if pref('AutomaticCheckEnabled', apple_sus_prefs_path) and \
                pref('AutomaticDownload', apple_sus_prefs_path) and \
                pref('AutomaticallyInstallMacOSUpdates', apple_sus_prefs_path):
                    # Only care about updates needing a restart
                    swupd_output = subprocess.check_output(['/usr/sbin/softwareupdate', '-la'])
                    for line in swupd_output.splitlines():
                        if b'restart' in line.lower():
                            minor_updates_required = True
                            break
                else:
                    # required preferences for background updates aren't present, notify for all
                    minor_updates_required = True

                if not minor_updates_required:
                    nudgelog('Only updates that can be installed in the background pending.')
                    set_pref('first_seen', None)
                    set_pref('last_seen', None)
                    exit()
                # todo: Work out how long the user has to install it
                # todays_date = datetime.utcnow()
                # first_seen_strp = datetime.strptime(first_seen, '%Y-%m-%d %H:%M:%S +0000')
                # date_diff_seconds = (first_seen_strp - todays_date).total_seconds()
                # date_diff_days = int(round(date_diff_seconds / 86400))
                # print date_diff_days

                # Allow admin to not show nudge all the time
                if days_between_notifications > 0:
                    if first_seen and last_seen:
                        today = datetime.utcnow()
                        last_seen_strp = datetime.strptime(last_seen, '%Y-%m-%d %H:%M:%S +0000')
                        difference = today - last_seen_strp
                        nudgelog(str(difference.days))
                        if difference.days < days_between_notifications:
                            nudgelog('Last seen date is within notification threshold: %s ' % str(days_between_notifications))
                            exit(0)

                if not first_seen:
                    set_pref('first_seen', datetime.utcnow())
                    first_seen = pref('first_seen')

    load_nudge_globals()

    # Use the paths defined, or default to pngs in the same local path of
    # nudge
    for index, path in enumerate([logo_path, screenshot_path]):
        if path in ('company_logo.png', 'update_ss.png'):
            local_png_path = os.path.join(
                NUDGE_PATH, path).replace(' ', '%20')
        else:
            local_png_path = os.path.join(path).replace(' ', '%20')
        foundation_nsurl_path = Foundation.NSURL.URLWithString_(
            'file:' + local_png_path)
        foundation_nsdata = Foundation.NSData.dataWithContentsOfURL_(
            foundation_nsurl_path)
        foundation_nsimage = NSImage.alloc().initWithData_(
            foundation_nsdata)
        if index == 0:
            nudge.views['image.companylogo'].setImage_(foundation_nsimage)
        else:
            nudge.views['image.updatess'].setImage_(foundation_nsimage)

    # Attach all the nib buttons to functions
    nudge.attach(button_update, 'button.update')
    nudge.attach(button_moreinfo, 'button.moreinfo')
    nudge.attach(button_ok, 'button.ok')
    nudge.attach(button_understand, 'button.understand')

    # Setup the UI fields
    nudge.views['field.titletext'].setStringValue_(main_title_text)
    nudge.views['field.subtitletext'].setStringValue_(main_subtitle_text)
    nudge.views['field.updatetext'].setStringValue_(paragraph_title_text)
    nudge.views['field.paragraph1'].setStringValue_(paragraph1_text)
    nudge.views['field.paragraph2'].setStringValue_(paragraph2_text)
    nudge.views['field.paragraph3'].setStringValue_(paragraph3_text)
    nudge.views['field.h1text'].setStringValue_(button_title_text)
    nudge.views['field.h2text'].setStringValue_(button_sub_titletext)

    # Dynamically set username and serialnumber
    nudge.views['field.username'].setStringValue_(str(user_name))
    nudge.views['field.serialnumber'].setStringValue_(str(get_serial()))
    nudge.views['field.updated'].setStringValue_('No')

    # Hide the MORE_INFO_URL if it's not set
    if not MORE_INFO_URL:
        nudge.views['button.moreinfo'].setHidden_(True)

    minimum_minor_update_days = get_minimum_minor_update_days(update_minor_days, pending_apple_updates(), nudge_su_prefs)
    if cut_off_date or (minor_updates_required and minimum_minor_update_days > 0):
        todays_date = datetime.utcnow()
        if not cut_off_date: # fix for minor updates logic
            cut_off_date_strp = todays_date + timedelta(days=minimum_minor_update_days)
        else:
            cut_off_date_strp = datetime.strptime(cut_off_date, '%Y-%m-%d-%H:%M')
        date_diff_seconds = (cut_off_date_strp - todays_date).total_seconds()
        date_diff_days = int(round(date_diff_seconds / 86400))

        if date_diff_seconds >= 0:
            nudge.views['field.daysremaining'].setStringValue_(
                date_diff_days)
        else:
            nudge.views['field.daysremaining'].setStringValue_(
                'Past date!')

        cut_off_warn = bool(date_diff_seconds < int(
            cut_off_date_warning) * 86400)

        # Setup our timer controller
        nudge.timer_controller = timerController.alloc().init()

        if date_diff_seconds <= 0:
            # If the cutoff date is over, get stupidly aggressive

            # Disable all buttons so the user cannot exit out of the
            # application, and have the manualenrollment button appear
            nudge.views['button.ok'].setHidden_(True)
            nudge.views['button.understand'].setHidden_(True)

            # Bring back nudge to the foreground, every 10 seconds
            timer = float(timer_elapsed)
        elif date_diff_seconds <= 3600:
            # If the cutoff date is within one hour, get very agressive

            # Disable all buttons so the user cannot exit out of the
            # application
            nudge.views['button.ok'].setHidden_(True)
            nudge.views['button.understand'].setHidden_(True)

            # Bring back nudge to the foreground, every 60 seconds
            # (1 minute)
            timer = float(timer_final)
        elif date_diff_seconds <= 86400:
            # If the cutoff date is within 86,400 seconds (24 hours), start
            # getting more agressive

            # Disable the ok button and require users to press understand
            # button first
            nudge.views['button.understand'].setHidden_(False)
            nudge.views['button.understand'].setEnabled_(True)
            nudge.views['button.ok'].setHidden_(True)

            # If the user doesn't close out of nudge, we want it to
            # reappear - bring back nudge to the foreground, every
            # 600 seconds (10 minutes)
            timer = float(timer_day_1)
        elif cut_off_warn:
            # If the cutoff date is within 259,200 seconds (72 hours) or
            # whatever the admin set, start getting a bit more agressive

            # Disable the ok button and require users to press understand
            # button first
            nudge.views['button.understand'].setHidden_(False)
            nudge.views['button.understand'].setEnabled_(True)
            nudge.views['button.ok'].setHidden_(True)

            # If the user doesn't close out of nudge, we want it to
            # reappear - bring back nudge to the foreground, every
            # 7,200 seconds (2 hours)
            timer = float(timer_day_3)
        else:
            # If the cutoff date is over 259,200 seconds (72 hours),
            # don't be that aggressive

            # Only require the ok button to exit out of nudge
            nudge.views['button.ok'].setHidden_(False)
            nudge.views['button.ok'].setEnabled_(True)
            nudge.views['button.understand'].setHidden_(True)

            # If the user doesn't close out of nudge, we want it to
            # reappear - bring back nudge to the foreground, every
            # 14,400 seconds (4 hours)
            timer = float(timer_initial)

        nudge.timer = (
            Foundation
            .NSTimer
            .scheduledTimerWithTimeInterval_target_selector_userInfo_repeats_(
                timer, nudge.timer_controller, 'activateWindow:', None, True))
    else:
        # If you elect not to use a cutoff date, then the UI will only
        # appear one time per run, and only use the ok button

        # Hide the fields used for the cutoff date
        nudge.views['field.daysremainingtext'].setHidden_(True)
        nudge.views['field.daysremaining'].setHidden_(True)

        # Only require the ok button to exit out of nudge
        nudge.views['button.ok'].setHidden_(False)
        nudge.views['button.ok'].setEnabled_(True)
        nudge.views['button.understand'].setHidden_(True)

        timer = float(timer_day_3)
        date_diff_seconds = 1000000

    # Use cut off dates, but don't use the timer functionality
    if no_timer:
        nudge.timer.invalidate()
        nudgelog('Timer invalidated!')
    else:
        nudgelog('Timer is set to %s' % str(timer))

    # Set last_seen pref
    set_pref('last_seen', datetime.utcnow())
    last_seen = pref('last_seen')

    # Set up our window controller and delegate
    nudge.hidden = True
    nudge.run()


if __name__ == '__main__':
    main()
